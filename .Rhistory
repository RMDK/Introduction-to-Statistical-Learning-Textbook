install.packages("ISLR")
default
Default
Credit
credit
df = read.csv('http://www-bcf.usc.edu/~gareth/ISL/Credit.csv')
credit = read.csv('http://www-bcf.usc.edu/~gareth/ISL/Credit.csv')
rm(df)
library(ggplot2)
qplot(Balance, Income, color='Default', geom='point')
qplot(data = credit, x=Balance, y=Income, color='Default', geom='point')
head(credit)
str(credit)
library(ISLR)
Default
attach(Default)
str(Default)
qplot( x=Balance, y=Income, color='Default', geom='point')
qplot(data=Default, x=Balance, y=Income, color='default', geom='point')
qplot(x=balance, y=income, color='default', geom='point')
ggplot(aes(balance, income, color='default'))+geom_point()
ggplot(data=Default,aes(balance, income, color='default'))+geom_point()
ggplot(data=Default,aes(balance, income, fill='default'))+geom_point()
Default$default
ggplot(data=Default,aes(x=balance, y=income, color='default'))+geom_point()
ggplot(data=Default,aes(x=balance, y=income, color=default))+geom_point()
qplot(x=balance, y=income, color=default, geom='point')
qplot(x=balance, y=income, color=default, shape=default, geom='point', size=1)
qplot(x=balance, y=income, color=default, shape=default, geom='point', size=0.1)
qplot(x=balance, y=income, color=default, shape=default, geom='point')
qplot(x=balance, y=income, color=default, shape=default, geom='point', position='dodge')
qplot(x=balance, y=income, color=default, shape=default, geom='point')+scale_shape(solid=FALSE)
install.packages('gridExtra')
y <- qplot(x=default, y=balance, geom='box_plot`)
y <- qplot(x=default, y=balance, geom='box_plot')
y <- qplot(x=default, y=balance, geom='boxplot')
y
x <- qplot(x=balance, y=income, color=default, shape=default, geom='point')+scale_shape(solid=FALSE)
y <- qplot(x=default, y=balance, color=default, geom='boxplot')
y
y <- qplot(x=default, y=balance, fill=default, geom='boxplot')
y
z <- qplot(x=default, y=income, fill=default, geom='boxplot')
library(ggplot2); library(gridExtra)
grid.arrange(x, y, z)
grid.arrange(x, y, z, nrow=1)
y <- qplot(x=default, y=balance, fill=default, geom='boxplot')+legend(guide=FALSE)
y <- qplot(x=default, y=balance, fill=default, geom='boxplot')+guides(fill=FALSE)
x <- qplot(x=balance, y=income, color=default, shape=default, geom='point')+scale_shape(solid=FALSE)+guides(fill=FALSE)
grid.arrange(x, y, z, nrow=1)
x <- qplot(x=balance, y=income, color=default, shape=default, geom='point')+scale_shape(solid=FALSE)+guides(fill=FALSE)
y <- qplot(x=default, y=balance, fill=default, geom='boxplot')+guides(fill=FALSE)
z <- qplot(x=default, y=income, fill=default, geom='boxplot')+guides(fill=FALSE)
grid.arrange(x, y, z, nrow=1)
x <- qplot(x=balance, y=income, color=default, shape=default, geom='point')+scale_shape(solid=FALSE)+
guides(fill=FALSE)
grid.arrange(x, y, z, nrow=1)
x <- qplot(x=balance, y=income, color=default, shape=default, geom='point')+scale_shape(solid=FALSE)+guides(fill=FALSE)
y <- qplot(x=default, y=balance, fill=default, geom='boxplot')+guides(fill=FALSE)
z <- qplot(x=default, y=income, fill=default, geom='boxplot')+guides(fill=FALSE)
grid.arrange(x, y, z, nrow=1)
grid.arrange(x, y, z, nrow=2)
grid.arrange(x, y, z, nrow=1)
x <- qplot(x=balance, y=income, color=default, shape=default, geom='point')+scale_shape(solid=FALSE)+theme(legend.position="none")
y <- qplot(x=default, y=balance, fill=default, geom='boxplot')+guides(fill=FALSE)
z <- qplot(x=default, y=income, fill=default, geom='boxplot')+guides(fill=FALSE)
grid.arrange(x, y, z, nrow=1)
x
x <- qplot(x=balance, y=income, color=default, shape=default, geom='point')+scale_shape(solid=FALSE)
x
grid.arrange(y, z, nrow=1)
table(default)
table(default)[1]
table(default)[2]/table(default[1])
table(default)[[2]]/table(default[[1]])
table(default)[[2]]
table(default)[[2]]/table(default[[1]])
table(default[[1]])
table(default[[2]])
table(default[[0]])
table(default[[3]])
table(default[1])
table(default[2])
table(default)[[2]]
table(default)
tmp <- table(default)
tmp
tmp[1]
tmp[[1]]
tmp[[2]]
tmp[[2]]/tmp[[1]]
(tmp[[2]]/tmp[[1]])*100
# Lets take a look at the data
str(Default)
# How many people actual default?
tmp <- table(default)
(tmp[[2]]/tmp[[1]])*100
attach(Default)
balance
str(Default)
tmp <- table(default)
(tmp[[2]]/tmp[[1]])*100
str(Default)
Default<-scan(Default)
Defaults<-Default
str(Defaults)
library(ISLR)
require(knitr)
library(ggplot2)
Default
str(Default)
tmp <- table(default)
(tmp[[2]]/tmp[[1]])*100
logit <- glm(default ~ balance, data=Default, family='binomial')
summary(logit)
Default$studentD <- 0
Default$studentD[Default$student=="Yes"] <- 1
logit <- glm(default ~ studentD, data=Default, family='binomial')
summary(logit)
logit <- gml(default ~ income + balance + studentD, family='binomial')
logit <- glm(default ~ income + balance + studentD, family='binomial')
logit <- glm(default ~ income + balance + studentD, family='binomial', data=Default)
summary(logit)
cor(student, balance)
cor(Default$studentD, balance)
names(Smarket)
str(Smarket)
cor(Smarket[,-9])
plot(Volume)
attach(Smarket)
plot(Volume)
plot(Year, Volume)
glmfit
install.packages('glmfit')
install.packages('glm2')
library(glm2)
glm.fit2
glm.fit2(family='binomial', y=Direction, x=Smarket[,-9])
glm.fit2(family=binomial(link = "logit"), y=Direction, x=Smarket[,-9])
glm.fit2(family=binomial(link = "logit"), y=Direction, x=Smarket[,-9], max.iter=1000)
library(caret)
modelFit<- train(Direction~., method='glm', family= preProcess=c('scale','center'), data=Smarket)
modelFit<- train(Direction~., method='glm', preProcess=c('scale','center'), data=Smarket)
confusionMatrix(testing$type, predict(modelFit, testing))
modelFit
summary(modelFit)
modelFit<- train(Direction~ Lag1, Lag2, method='glm', preProcess=c('scale','center'), data=Smarket)
modelFit<- train(Direction~Lag1+Lag2, method='glm', preProcess=c('scale','center'), data=Smarket)
summary(modelFit)
modelFit<- train(Direction~Lag1+Lag2+Year, method='glm', preProcess=c('scale','center'), data=Smarket)
summary(modelFit)
modelFit<- train(Direction~Lag1+Lag2+Volume, method='glm', preProcess=c('scale','center'), data=Smarket)
summary(modelFit)
glm.fit2(family=binomial(link = "logit"), y=Direction, x=Smarket[,-9], max.iter=1000)
glm.fit2(family=binomial(link = "logit"), y=Direction, x=Smarket[,-9], maxit=1000)
glm.fit2(family=binomial(link = "logit"), y=Direction, x=Smarket[,-9])
glm.fit(family=binomial(link = "logit"), y=Direction, x=Smarket[,-9])
glm.fit(family=binomial(link = "logit"), y=Direction, x=Smarket[,-9], control(maxit=100))
glm.fit(family=binomial(link = "logit"), y=Direction, x=Smarket[,-9], control=list(maxit=100))
glm.fit(family=binomial(link = "logit"), y=Direction, x=Smarket[,-9], control=list(maxit=1000))
test<-glm.fit(family=binomial(link = "logit"), y=Direction, x=Smarket[,-9], control=list(maxit=1000))
summary(test)
summary(test)$coefficients
test$coefficients
test$R
plot(test)
plot(test$fittedvalues)
plot(test$fitted.values)
confusionMatrix(Direction, predict(test, Smarket))
confusionMatrix(Direction, predict(test, Smarket[,-9]))
confusionMatrix(Smarket$Direction, predict(test, Smarket[,-9]))
confusionMatrix(factor(Smarket$Direction), predict(test, Smarket[,-9]))
table(test.pred, Directions)
test
summary(test)
table(test$fitted.values, Directions)
table(test$fitted.values, Direction)
test$effects
test$fitted.values
glm.pred=rep('Down', 1250)
test.fit
glm.fit
predict(test, type='response')
glm.pred=rep('Down', 1250)
glm.pred[test$fitted.values>0.5]='Up'
table(glm.pred, Direction)
mean(glm.pred==Direction)
test$coefficients
Smarket
head(Smarket)
X<-Smarket[-c('Year', 'Today', 'Direction')]
X<-Smarket[!c('Year', 'Today', 'Direction')]
X<-Smarket[!, c('Year', 'Today', 'Direction')]
X<-Smarket[,!c('Year', 'Today', 'Direction')]
class(Smarket)
X<-Smarket[,c('Year', 'Today', 'Direction')]
X<-Smarket[,-c('Year', 'Today', 'Direction')]
X<-Smarket[,!c('Year', 'Today', 'Direction')]
X<-Smarket[,c('Lag1', 'Lag2', 'Lag3', 'Lag4','Lag5','Volume')]
test<-glm.fit(family=binomial(link = "logit"), y=Direction, x=X, control=list(maxit=1000))
test$coefficients
table(glm.pred, Direction)
logit <- glm(Direction ~ X, family='binomial')
logit <- glm(Direction ~ Lag1+Lag2+Lag3+Lag4+Lag5+Volume, family='binomial')
summary(logit)
str(Smarket)
train<-Smarket[Year<2005]
train<-Smarket[Year<2005,]
test<-Smarket[Year==2005,]
plot(train$Year)
logit <- glm(Direction ~ Lag1+Lag2+Lag3+Lag4+Lag5+Volume, family='binomial', data=train)
summary(logit)
confusionMatrix(testing$Direction, predict(logit, testing))
confusionMatrix(testing$Direction, predict(logit, test))
confusionMatrix(test$Direction, predict(logit, test))
test$Directin
test$Direction
predict(logit, test)
pred.logit <- 0
pred.logit[predict(logit, test)>0.5] <- 1
confusionMatrix(test$Direction, pred.logit)
pred.logit <- 'Down'
pred.logit[predict(logit, test)>0.5] <- 'Up'
confusionMatrix(test$Direction, pred.logit)
pred.logit
logit.fitted.values
logit$fitted.values
pred.logit[logit$fitted.values>0.5] <- 'Up'
confusionMatrix(test$Direction, pred.logit)
pred.logit
pred.logit <- 'Down'
pred.logit[logit$fitted.values>=0.5] <- 'Up'
pred.logit
pred.logit <- 'Down'
pred.logit
table(pred.logit, Direction)
length(pred.logit)
pred.logit
pred.test <-predict(logit, test)
pred.logit <- rep('Down',length(pred.test))
pred.logit[pred.test>=0.5] <- 'Up'
table(pred.logit, Direction)
pred.logit
pred.test
pred.test>=0.5
pred.test
summary(logit)
test.probs <-predict(logit, test, type='response')
pred.logit <- rep('Down',length(pred.test))
pred.logit[pred.test>=0.5] <- 'Up'
table(pred.logit, Direction)
pred.logit
test.probs
pred.logit <- rep('Down',length(pred.test))
pred.logit[test.probs>=0.5] <- 'Up'
table(pred.logit, Direction)
pred.logit
direction
table(pred.logit, test$Direction)
mean(pred.logit==test$Direction)
Smarket
modelFit<- train(Direction~Lag1+Lag2+Volume, method='glm', preProcess=c('scale','center'), data=Smarket, family=binomial(link='logit'))
summary(modelFit)
modelFit<- train(Direction~Lag1+Lag2, method='glm', preProcess=c('scale','center'), data=Smarket, family=binomial(link='logit'))
summary(modelFit)
Volume
modelFit<- train(Direction~Lag1+Lag2+Volume, method='glm', preProcess=c('scale','center'), data=Smarket, family=binomial(link='logit'))
summary(modelFit)
modelFit<- train(Direction~Lag1+Volume, method='glm', preProcess=c('scale','center'), data=Smarket, family=binomial(link='logit'))
summary(modelFit)
logit <- glm(Direction ~ Lag1+Volume, family='binomial', data=train)
summary(logit)
modelFit<- train(Direction~Lag1+Volume, method='glm', preProcess=c('scale','center'), data=test, family=binomial(link='logit'))
summary(modelFit)
modelFit<- train(Direction~Lag1+Lag2, method='glm', preProcess=c('scale','center'), data=test, family=binomial(link='logit'))
summary(modelFit)
Volume
modelFit<- train(Direction~Lag1+Volume, method='glm', preProcess=c('scale','center'), data=test, family=binomial(link='logit'))
summary(modelFit)
summary(logit)
confusionMatrix(test$Direction, predict(modelFit, test))
modelFit<- train(Direction~Lag1+Lag2, method='glm', preProcess=c('scale','center'), data=test, family=binomial(link='logit'))
summary(modelFit)
confusionMatrix(test$Direction, predict(modelFit, test))
modelFit<- train(Direction~Lag1+Lag2+Volume, method='glm', preProcess=c('scale','center'), data=test, family=binomial(link='logit'))
summary(modelFit)
confusionMatrix(test$Direction, predict(modelFit, test))
modelFit<- train(Direction~Lag1+Volume, method='glm', preProcess=c('scale','center'), data=test, family=binomial(link='logit'))
summary(modelFit)
confusionMatrix(test$Direction, predict(modelFit, test))
test<-glm.fit(family=binomial(link = "logit"), y=Direction, x=X, control=list(maxit=1000))
test$coefficients
table(glm.pred, Direction)
mean(glm.pred==Direction)
test
summary(test)
test$aic
mean(pred.logit==test$Direction)
logit <- glm(Direction ~ Lag1+Volume, family='binomial', data=train)
summary(logit)
test.probs <-predict(logit, test, type='response')
pred.logit <- rep('Down',length(pred.test))
pred.logit[test.probs>=0.5] <- 'Up'
table(pred.logit, test$Direction)
train<-Smarket[Year<2005,]
test<-Smarket[Year==2005,]
logit <- glm(Direction ~ Lag1+Volume, family='binomial', data=train)
summary(logit)
test.probs <-predict(logit, test, type='response')
pred.logit <- rep('Down',length(pred.test))
pred.logit[test.probs>=0.5] <- 'Up'
table(pred.logit, test$Direction)
mean(pred.logit==test$Direction)
```
mean(pred.logit==test$Direction)
```
mean(pred.logit!=test$Direction)
confusionMatrix(test$Direction, predict(logit, test))
confusionMatrix(test$Direction, predict(logit, test, type='response'))
summary(modelFit)
confusionMatrix(test$Direction, predict(modelFit, test))
modelFit<- train(Direction~Lag1+Lag2, method='glm', preProcess=c('scale','center'), data=test, family=binomial(link='logit'))
summary(modelFit)
confusionMatrix(test$Direction, predict(modelFit, test))
modelFit<- train(Direction~Lag1+Volume, method='glm', preProcess=c('scale','center'), data=test, family=binomial(link='logit'))
summary(modelFit)
confusionMatrix(test$Direction, predict(modelFit, test))
table(pred.logit, test$Direction)
modelFit<- train(Direction~Lag1+Volume, method='glm',  data=test, family=binomial(link='logit'))
summary(modelFit)
confusionMatrix(test$Direction, predict(modelFit, test))
modelFit
mean(pred.logit!=test$Direction)
mean(pred.logit==test$Direction)
logit <- glm(Direction ~ Lag1+Lag2, family='binomial', data=train)
summary(logit)
test.probs <-predict(logit, test, type='response')
pred.logit <- rep('Down',length(pred.test))
pred.logit[test.probs>=0.5] <- 'Up'
table(pred.logit, test$Direction)
mean(pred.logit==test$Direction)
logit <- glm(Direction ~ Lag1+Lag2+Lag3, family='binomial', data=train)
summary(logit)
test.probs <-predict(logit, test, type='response')
pred.logit <- rep('Down',length(pred.test))
pred.logit[test.probs>=0.5] <- 'Up'
table(pred.logit, test$Direction)
mean(pred.logit==test$Direction)
logit <- glm(Direction ~ Lag1+Lag2+Lag3+Lag4, family='binomial', data=train)
summary(logit)
test.probs <-predict(logit, test, type='response')
pred.logit <- rep('Down',length(pred.test))
pred.logit[test.probs>=0.5] <- 'Up'
table(pred.logit, test$Direction)
mean(pred.logit==test$Direction)
logit <- glm(Direction ~ Lag1+Lag2+Lag3+Lag5, family='binomial', data=train)
summary(logit)
test.probs <-predict(logit, test, type='response')
pred.logit <- rep('Down',length(pred.test))
pred.logit[test.probs>=0.5] <- 'Up'
table(pred.logit, test$Direction)
mean(pred.logit==test$Direction)
logit <- glm(Direction ~ Lag1+Lag2+Lag3, family='binomial', data=train)
summary(logit)
test.probs <-predict(logit, test, type='response')
pred.logit <- rep('Down',length(pred.test))
pred.logit[test.probs>=0.5] <- 'Up'
table(pred.logit, test$Direction)
mean(pred.logit==test$Direction)
logit <- glm(Direction ~ Lag1+Lag2+Lag3+Volume, family='binomial', data=train)
summary(logit)
test.probs <-predict(logit, test, type='response')
pred.logit <- rep('Down',length(pred.test))
pred.logit[test.probs>=0.5] <- 'Up'
table(pred.logit, test$Direction)
mean(pred.logit==test$Direction)
logit <- glm(Direction ~ Lag1+Lag2+Lag3, family='binomial', data=train)
summary(logit)
test.probs <-predict(logit, test, type='response')
pred.logit <- rep('Down',length(pred.test))
pred.logit[test.probs>=0.5] <- 'Up'
table(pred.logit, test$Direction)
mean(pred.logit==test$Direction)
```
modelFit<- train(Direction~Lag1+Lag2+Lag3, method='glm',  data=test, family=binomial(link='logit'))
summary(modelFit)
confusionMatrix(test$Direction, predict(modelFit, test))
modelFit
confusionMatrix(test$Direction, pred.logit)
table(pred.logit, test$Direction)
confusionMatrix(test$Direction, predict(modelFit, test))
modelFit<- train(Direction~Lag1+Lag2+Lag3, method='glm',preprocessing=c('scale', 'center'), data=train, family=binomial(link='logit'))
modelFit<- train(Direction~Lag1+Lag2, method='glm',preprocessing=c('scale', 'center'), data=train, family=binomial(link='logit'))
summary(modelFit)
modelFit<- train(Direction~Lag1+Lag2, method='glm',preProcess=c('scale', 'center'), data=train, family=binomial(link='logit'))
summary(modelFit)
confusionMatrix(test$Direction, predict(modelFit, test))
modelFit<- train(Direction~Lag1+Lag2+Lag3, method='glm',preProcess=c('scale', 'center'), data=train, family=binomial(link='logit'))
summary(modelFit)
confusionMatrix(test$Direction, predict(modelFit, test))
confusionMatrix(test$Direction, pred.logit)
confusionMatrix(test$Direction, predict(modelFit, test))
nearZeroVar(train)
nearZeroVar(train, saveMetrics=TRUE)
cor(train)
cor(train[,-9])
X<-cor(train[,-9])
findCorrelation(X, cutoff=0.5)
findCorrelation(X, cutoff=0.1)
findCorrelation(X, cutoff=0.2)
findCorrelation(X, cutoff=0.4)
findCorrelation(X, cutoff=0.3)
findCorrelation(X, cutoff=0.2)
attach(Default)
xtabs(~admit + rank, data=data)
data <- read.csv("http://www.ats.ucla.edu/stat/data/binary.csv")
xtabs(~admit + rank, data=data)
str(data)
data$rank <- factor(data$rank)
logit <- glm(admit ~ gre + gpa + rank, data=data, family = 'binomial')
summary(logit)
confint(logit)
confint.default(logit) # Using standard errors
library(aod)
install.packages('aod')
wald.test(b = coef(logit), Sigma = vcov(logit), Terms=4:6)
library(aod)
wald.test(b = coef(logit), Sigma = vcov(logit), Terms=4:6)
l <- cbind(0,0,0,1,-1,0)
wald.test(b=coef(logit, Sigma=vcov(logit), L=l))
wald.test(b=coef(logit), Sigma=vcov(logit), L=l))
wald.test(b=coef(logit), Sigma=vcov(logit), L=l)
exp(coef(logit))
exp(cbind(OR = coef(logit), confint(logit)))
ranktest <- with(data, data.frame(gre=mean(gre), gpa=mean(gpa), rank=factor(1:4)))
ranktest
ranktest$rankP <- predict(logit, newdata=ranktest, type='response')
ranktest
newdata <- with(data, data.frame(gre=rep(seq(200, 800, length.out=100), 4), gpa=mean(gpa), rank = factor(rep(1:4, each = 100))))
cbind(newdata, predict(logit, newdata=newdata, type='link', se=TRUE))
probs <- cbind(newdata, predict(logit, newdata=newdata, type='link', se=TRUE))
plot(predict(logit, newdata=newdata, type='link', se=TRUE))
plot(predict(logit, newdata=newdata, type='link'))
head(newdata)
head(probs)
probs <- within(probs, {
PredProb <- plogis(fit) # fit logistic curve
LL <- plogis(fit - (1.96 * se.fit)) # create lower limits
UL <- plogis(fit + (1.96 * se.fit))
})
ggplot(probs, aes(x=gre, y=PredProb)) +
geom_ribbon(aes(ymin=LL, ymax=UL, fill=rank), alpha=0.2) +
geom_line(aes(color=rank, size=1))
ggplot(probs, aes(x=gre, y=PredProb)) +
geom_ribbon(aes(ymin=LL, ymax=UL, fill=rank), alpha=0.2) +
geom_line(aes(color=rank))
library(MASS)
lda.fit <- lda(Direction~Lag1 + Lag2 + Lag3, data=Smarket, subset = train)
library(ISLR)
lda.fit <- lda(Direction~Lag1 + Lag2 + Lag3, data=Smarket, subset = train)
```
Smarket
data <- read.csv("http://www.ats.ucla.edu/stat/data/binary.csv")
str(data)
summary(data)
sapply(data, sd) # standard deviation
xtabs(~admit + rank, data=data)
data$rank <- factor(data$rank)
library(MASS)
library(ISLR)
lda.fit <- lda(Direction~Lag1 + Lag2 + Lag3, data=Smarket, subset = train)
lda.fit <- lda(Direction~Lag1 + Lag2 + Lag3, data=data, subset = train)
lda.fit <- lda(Direction~Lag1 + Lag2 + Lag3, data=data)
attach(Smarket)
train<-Smarket[Year<2005,]
test<-Smarket[Year==2005,]
lda.fit <- lda(Direction~Lag1 + Lag2 + Lag3, data=data)
lda.fit <- lda(Direction~Lag1 + Lag2 + Lag3, data=train)
lda.fit
lda.fit <- lda(Direction~Lag1 + Lag2, data=train)
lda.fit
summary(lda.fit)
summary(lda.fit$terms
)
lda.fit$terms
plot(lda.fit)
lda.pred <- predict(lda.fit, test)
names(lda.pred)
lda.pred$x
plot(lda.pred$x)
table(lda.pred$class, test)
table(lda.pred$class, test$Direction)
mean(lda.pred$class==test$Direction)
sum(lda.pred$posterior[,1]>0.9)
modelFit<- train(Direction~Lag1+Lag2, method='lda',preProcess=c('scale', 'center'), data=train)
summary(modelFit)
confusionMatrix(test$Direction, predict(modelFit, test))
qda.fit <- qda(Direction ~ Lag1 + Lag2, data = train)
qda.fit
qda.class <- predict(pda.fit, test)$class
qda.class <- predict(qda.fit, test)$class
table(qda.class, test$Direction)
mean(qda.class == test$Direction)
modelFit <- train(Direction~Lag1+Lag2, data=train)
modelFit
modelFit <- train(Direction~Lag1+Lag2, method='qda', preProcess = c('scale', 'center'),data=train)
modelFit
confusionMatrix(test$Direction, predict(modelFit, test))
